const playerChannel=new BroadcastChannel("player_channel"),statusChannel=new BroadcastChannel("status_channel"),roleChannel=new BroadcastChannel("role_channel"),bestMoveChannel=new BroadcastChannel("best_move_channel"),resetChannel=new BroadcastChannel("reset_channel");async function init(){await getTournaments(),setPlayerSelects(),setStatusSelects(),setRoleSelects(),setBestMove(),setTournaments()}function addOptionsTournaments(e){const n=document.getElementById("tournamentSelect");for(;n.children.length>1;)n.children[1].remove();e.forEach(e=>{const t=document.createElement("option");t.value=e.path,t.innerHTML=e.name,n.appendChild(t)})}function addOptionsPlayers(e){document.querySelectorAll("#playerSelect").forEach(n=>{for(;n.children.length>1;)n.children[1].remove();e.forEach(e=>{const t=document.createElement("option");t.value=e.image,t.innerHTML=e.name,n.appendChild(t)})})}function switchRoles(){document.querySelectorAll("#roleSelect").forEach(e=>{"form-select visible"===e.className?e.className="form-select invisible":e.className="form-select visible"})}function setPlayerSelects(){document.querySelectorAll("#playerSelect").forEach(e=>{e.addEventListener("change",()=>{playerChannel.postMessage({pos:Number(e.parentElement.parentElement.id),player:"default"===e.value?{name:"",image:""}:{name:e.options[e.options.selectedIndex].innerHTML,image:e.value}})})})}function setStatusSelects(){document.querySelectorAll("#statusSelect").forEach(e=>{e.addEventListener("change",()=>{statusChannel.postMessage({pos:Number(e.parentElement.parentElement.id),status:e.value})})})}function setRoleSelects(){document.querySelectorAll("#roleSelect").forEach(e=>{e.addEventListener("change",()=>{roleChannel.postMessage({pos:Number(e.parentElement.parentElement.id),role:e.value})})})}function setBestMove(){const e=document.getElementById("bestMove");for(let n=0;n<3;n++)e.children[1].children[0].children[n].children[0].addEventListener("change",()=>{bestMoveChannel.postMessage({bestMoveId:Number(n+1),number:e.children[1].children[0].children[n].children[0].options[e.children[1].children[0].children[n].children[0].options.selectedIndex].value})})}function setTournaments(){const e=document.getElementById("tournamentSelect");e.addEventListener("change",async()=>{if("default"===e.value)return;let n;try{await axios.get("/players",{params:{path:e.value},headers:{Authorization:"Bearer "+window.token}}).then(e=>n=e.data).catch(e=>console.error("Ошибка:",e.message))}catch(e){console.error("Ошибка:",e.message)}n?addOptionsPlayers(n):console.error("Ошибка получения списка игроков турнира")})}function reset(){resetDocpanel(),resetChannel.postMessage("reset")}function resetDocpanel(){document.querySelectorAll("#statusSelect").forEach(e=>{e.options.selectedIndex=0}),document.querySelectorAll("#roleSelect").forEach(e=>{e.options.selectedIndex=0});const e=document.getElementById("bestMove");for(let n=0;n<3;n++)e.children[1].children[0].children[n].children[0].options.selectedIndex=0}function setCustomPlayer(){const e=document.getElementById("customPlayerInput"),n=document.getElementById("customPlayerSelect");""!==e.value&&(playerChannel.postMessage({pos:Number(n.value),player:{name:e.value,image:""}}),e.value="")}async function getTournaments(){let e;try{await axios.get("/tournaments",{headers:{Authorization:"Bearer "+window.token}}).then(n=>e=n.data).catch(e=>console.error("Ошибка:",e.message))}catch(e){console.error("Ошибка:",e.message)}e?addOptionsTournaments(e):console.error("Данные о турнирах не были получены")}axios.defaults.baseURL="https://mafroles-disk.onrender.com/api/disk",init();