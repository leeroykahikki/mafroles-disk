const playerChannel=new BroadcastChannel("player_channel"),statusChannel=new BroadcastChannel("status_channel"),roleChannel=new BroadcastChannel("role_channel"),bestMoveChannel=new BroadcastChannel("best_move_channel"),resetChannel=new BroadcastChannel("reset_channel"),resetAllChannel=new BroadcastChannel("reset_all_channel");async function init(){await getTournaments(),setPlayerSelects(),setStatusSelects(),setRoleSelects(),setBestMove(),setTournaments()}function addOptionsTournaments(e){const t=document.getElementById("tournamentSelect");for(;t.children.length>1;)t.children[1].remove();e.forEach((e=>{const n=document.createElement("option");n.value=e.path,n.innerHTML=e.name,t.appendChild(n)}))}function addOptionsPlayers(e){document.querySelectorAll(".playerSelect").forEach((t=>{for(;t.children.length>1;)t.children[1].remove();e.forEach((e=>{const n=document.createElement("option");n.value=e.image,n.innerHTML=e.name,t.appendChild(n)}))})),window.players=e}function switchRoles(){document.querySelectorAll("#roleSelect").forEach((e=>{"form-select visible"===e.className?e.className="form-select invisible":e.className="form-select visible"}))}function setPlayerSelects(){for(let e=1;e<=10;e++)$(`#playerSelect${e}`).select2({width:"100%",data:[{id:"default",text:"Игрок не выбран",selected:!0}],theme:"bootstrap-5"}).on("select2:select",(function(e){console.log({pos:Number(e.currentTarget.id.replace("playerSelect","")),player:"default"===e.params.data.id?{name:"",image:""}:{name:e.params.data.text,image:e.params.data.id}}),playerChannel.postMessage({pos:Number(e.currentTarget.id.replace("playerSelect","")),player:"default"===e.params.data.id?{name:"",image:""}:{name:e.params.data.text,image:e.params.data.id}})}))}function setStatusSelects(){document.querySelectorAll("#statusSelect").forEach((e=>{e.addEventListener("change",(()=>{statusChannel.postMessage({pos:Number(e.parentElement.parentElement.id),status:e.value})}))}))}function setRoleSelects(){document.querySelectorAll("#roleSelect").forEach((e=>{e.addEventListener("change",(()=>{roleChannel.postMessage({pos:Number(e.parentElement.parentElement.id),role:e.value})}))}))}function setBestMove(){const e=document.getElementById("bestMove");for(let t=0;t<3;t++)e.children[1].children[0].children[t].children[0].addEventListener("change",(()=>{bestMoveChannel.postMessage({bestMoveId:Number(t+1),number:e.children[1].children[0].children[t].children[0].options[e.children[1].children[0].children[t].children[0].options.selectedIndex].value})}))}function setTournaments(){const e=document.getElementById("tournamentSelect");e.addEventListener("change",(async()=>{if("default"===e.value)return;let t;try{await axios.get("/players",{params:{path:e.value},headers:{Authorization:"Bearer "+window.token}}).then((e=>t=e.data)).catch((e=>console.error("Ошибка:",e.message)))}catch(e){console.error("Ошибка:",e.message)}t?addOptionsPlayers(t):console.error("Ошибка получения списка игроков турнира")}))}function reset(){resetDocpanel(),resetChannel.postMessage("reset")}function resetDocpanel(){document.querySelectorAll("#statusSelect").forEach((e=>{e.options.selectedIndex=0}));document.querySelectorAll("#roleSelect").forEach((e=>{e.options.selectedIndex=0}));const e=document.getElementById("bestMove");for(let t=0;t<3;t++)e.children[1].children[0].children[t].children[0].options.selectedIndex=0}function resetAll(){resetAllDocpanel(),resetAllChannel.postMessage("reset_all")}function resetAllDocpanel(){for(let e=1;e<=10;e++)$(`#playerSelect${e}`).val("default"),$(`#playerSelect${e}`).trigger("change");document.querySelectorAll("#statusSelect").forEach((e=>{e.options.selectedIndex=0}));document.querySelectorAll("#roleSelect").forEach((e=>{e.options.selectedIndex=0}));const e=document.getElementById("bestMove");for(let t=0;t<3;t++)e.children[1].children[0].children[t].children[0].options.selectedIndex=0}function setCustomPlayer(){const e=document.getElementById("customPlayerInput"),t=document.getElementById("customPlayerSelect");""!==e.value&&(playerChannel.postMessage({pos:Number(t.value),player:{name:e.value,image:""}}),e.value="")}async function getTournaments(){let e;try{await axios.get("/tournaments",{headers:{Authorization:"Bearer "+window.token}}).then((t=>e=t.data)).catch((e=>console.error("Ошибка:",e.message)))}catch(e){console.error("Ошибка:",e.message)}e?addOptionsTournaments(e):console.error("Данные о турнирах не были получены")}axios.defaults.baseURL=window.baseURL,init();