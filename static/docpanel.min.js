const playerChannel=new BroadcastChannel('player_channel');const statusChannel=new BroadcastChannel('status_channel');const roleChannel=new BroadcastChannel('role_channel');const bestMoveChannel=new BroadcastChannel('best_move_channel');const resetChannel=new BroadcastChannel('reset_channel');const resetAllChannel=new BroadcastChannel('reset_all_channel');axios.defaults.baseURL=window.baseURL;async function init(){await getTournaments();setPlayerSelects();setStatusSelects();setRoleSelects();setBestMove();setTournaments()}
function addOptionsTournaments(tournaments){const tournamentSelect=document.getElementById('tournamentSelect');while(tournamentSelect.children.length>1)tournamentSelect.children[1].remove();tournaments.forEach((tournament)=>{const option=document.createElement('option');option.value=tournament.path;option.innerHTML=tournament.name;tournamentSelect.appendChild(option)})}
function addOptionsPlayers(players){const playerSelects=document.querySelectorAll('.playerSelect');playerSelects.forEach((select)=>{while(select.children.length>1)select.children[1].remove();players.forEach((player)=>{const option=document.createElement('option');option.value=player.image;option.innerHTML=player.name;select.appendChild(option)})});window.players=players}
function switchRoles(){const selects=document.querySelectorAll('#roleSelect');selects.forEach((select)=>{if(select.className==='form-select visible'){select.className='form-select invisible'}else{select.className='form-select visible'}})}
function setPlayerSelects(){for(let i=1;i<=10;i++){$(`#playerSelect${i}`).select2({width:'100%',data:[{id:'default',text:'Игрок не выбран',selected:!0,},],theme:'bootstrap-5',}).on('select2:select',function(e){console.log({pos:Number(e.currentTarget.id.replace('playerSelect','')),player:e.params.data.id==='default'?{name:'',image:''}:{name:e.params.data.text,image:e.params.data.id,},});playerChannel.postMessage({pos:Number(e.currentTarget.id.replace('playerSelect','')),player:e.params.data.id==='default'?{name:'',image:''}:{name:e.params.data.text,image:e.params.data.id,},})})}}
function setStatusSelects(){const statusSelects=document.querySelectorAll('#statusSelect');statusSelects.forEach((select)=>{select.addEventListener('change',()=>{statusChannel.postMessage({pos:Number(select.parentElement.parentElement.id),status:select.value,})})})}
function setRoleSelects(){const roleSelects=document.querySelectorAll('#roleSelect');roleSelects.forEach((select)=>{select.addEventListener('change',()=>{roleChannel.postMessage({pos:Number(select.parentElement.parentElement.id),role:select.value,})})})}
function setBestMove(){const bestMove=document.getElementById('bestMove');for(let i=0;i<3;i++){bestMove.children[1].children[0].children[i].children[0].addEventListener('change',()=>{bestMoveChannel.postMessage({bestMoveId:Number(i+1),number:bestMove.children[1].children[0].children[i].children[0].options[bestMove.children[1].children[0].children[i].children[0].options.selectedIndex].value,})})}}
function setTournaments(){const tournamentSelect=document.getElementById('tournamentSelect');tournamentSelect.addEventListener('change',async()=>{if(tournamentSelect.value==='default')return;let players;try{await axios.get('/players',{params:{path:tournamentSelect.value,},headers:{Authorization:'Bearer '+window.token},}).then((response)=>(players=response.data)).catch((error)=>console.error('Ошибка:',error.message))}catch(error){console.error('Ошибка:',error.message)}
if(!players){console.error('Ошибка получения списка игроков турнира');return}
addOptionsPlayers(players)})}
function reset(){resetDocpanel();resetChannel.postMessage('reset')}
function resetDocpanel(){const statusSelects=document.querySelectorAll('#statusSelect');statusSelects.forEach((select)=>{select.options.selectedIndex=0});const roleSelects=document.querySelectorAll('#roleSelect');roleSelects.forEach((select)=>{select.options.selectedIndex=0});const bestMove=document.getElementById('bestMove');for(let i=0;i<3;i++){bestMove.children[1].children[0].children[i].children[0].options.selectedIndex=0}}
function resetAll(){resetAllDocpanel();resetAllChannel.postMessage('reset_all')}
function resetAllDocpanel(){for(let i=1;i<=10;i++){$(`#playerSelect${i}`).val('default');$(`#playerSelect${i}`).trigger('change')}
const statusSelects=document.querySelectorAll('#statusSelect');statusSelects.forEach((select)=>{select.options.selectedIndex=0});const roleSelects=document.querySelectorAll('#roleSelect');roleSelects.forEach((select)=>{select.options.selectedIndex=0});const bestMove=document.getElementById('bestMove');for(let i=0;i<3;i++){bestMove.children[1].children[0].children[i].children[0].options.selectedIndex=0}}
function setCustomPlayer(){const input=document.getElementById('customPlayerInput');const select=document.getElementById('customPlayerSelect');if(input.value==='')return;playerChannel.postMessage({pos:Number(select.value),player:{name:input.value,image:''},});input.value=''}
async function getTournaments(){let tournaments;try{await axios.get('/tournaments',{headers:{Authorization:'Bearer '+window.token},}).then((response)=>(tournaments=response.data)).catch((error)=>console.error('Ошибка:',error.message))}catch(error){console.error('Ошибка:',error.message)}
if(!tournaments){console.error('Данные о турнирах не были получены');return}
addOptionsTournaments(tournaments)}
init()